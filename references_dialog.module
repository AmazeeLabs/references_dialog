<?php

/**
 * @file
 * This the main module file.
 */
function references_dialog_element_info_alter(&$info) {
  $i = 0;
  foreach (references_dialog_widgets() as $widget) {
    if (isset($info[$widget['element_type']])) {
      $info[$widget['element_type']]['#after_build'][] = 'references_dialog_process_widget';
    }
  }
}

function references_dialog_menu() {
  $items = array();
  // This redirect callback is used when adding and editing content in
  // the overlay. When content is created or edited, we are directed here,
  // so we can act properly on entities.
  $items['references-dialog/redirect/%/%'] = array(
    'page callback' => 'references_dialog_redirect_page',
    'page arguments' => array(2,3),
    'access callback' => 'references_dialog_redirect_access',
    'access arguments' => array(2,3),
  );
  $items['references-dialog/search/%/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'references_dialog_search_view',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'references_dialog_search_access',
    'access arguments' => array(2, 3, 4),
  );
  return $items;
}

function references_dialog_field_widget_info_alter(&$info) {
  foreach (array_keys(references_dialog_widgets()) as $widget) {
    if (isset($info[$widget]['settings'])) {
      $info[$widget]['settings'] += array(
        'references_dialog_add_dialog' => 0,
        'references_dialog_edit_dialog' => 0,
        'references_dialog_search_dialog' => 0,
        'references_dialog_seach_dialog_view' => '',
      );
    }
  }
}

/**
 * Return an array of supported widgets.
 */
function references_dialog_widgets() {
  return array(
    'node_reference_autocomplete' => array(
      'element_type' => 'textfield',
      'dialog_form' => 'references_dialog_nodereferences_form',
    ), 
    'user_reference_autocomplete' => array(
      'element_type' => 'textfield', 
    ),
  );
}

function references_dialog_widget_load($widget) {
  $widgets = references_dialog_widgets();
  return $widgets[$widget];
}

function references_dialog_nodereferences_form(&$element, $widget_settings, $field, $instance) {
 $link_options = array('attributes' => array('class' => array('references-dialog-activate')));
 $dialog_links = array();
  // References provides the option to select which types are referenceable.
  if (isset($field['settings']['referenceable_types']) && isset($widget_settings['references_dialog_add_dialog']))  {
    foreach ($field['settings']['referenceable_types'] as $type => $active) {
      if ($active !== 0) {
        $node_type = node_type_load($type);
        $add_link = array(
          'title' => t('Create @type', array('@type' => $node_type->name)),
          'href' => 'node/add/' . strtr($type, array('_' => '-')),
        ) + $link_options;
        $add_link['attributes']['class'][] = 'add-dialog';
        $dialog_links[] = $add_link;
      }
    }
  }
  if ($widget_settings['references_dialog_edit_dialog'] && isset($element['#default_value'])) {
    $edit_link = array(
      'title' => t('Edit'), 
      'href' => 'node/' . $element['#default_value'] . '/edit'
    ) + $link_options;
    $edit_link['attributes']['class'][] = 'edit-dialog';
    $dialog_links[] = $edit_link;
  }
  if ($widget_settings['references_dialog_search_dialog']) {
    $search_link = array(
      'title' => t('Search'),
      'href' => 'references-dialog/search/' . $instance['entity_type'] . '/' .
        $instance['field_name'] . '/' .
        $instance['bundle'],
    ) + $link_options;
    $search_link['attributes']['class'][] = 'search-dialog';
    $dialog_links[] = $search_link;
  }
  if (count($dialog_links)) {
    $element['#suffix'] = theme('references_dialog_links', $dialog_links);
  }
}

/**
 * Implements hook_form_alter().
 */
function references_dialog_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if (array_key_exists($form['instance']['widget']['type']['#value'], references_dialog_widgets())) {
    $field = $form['#field'];
    $instance = field_info_instance($form['instance']['entity_type']['#value'], $form['instance']['field_name']['#value'], $form['instance']['bundle']['#value']);
    $form['instance']['widget']['settings'] += references_dialog_settings_form($field, $instance);
  }
}

/**
 * A widget settings form for our references dialog fields.
 */
function references_dialog_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  // Add our own additions.
  $form['references_dialog_add_dialog'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add dialog'),
    '#default_value' => $settings['references_dialog_add_dialog'],
    '#description' => t('Display an option to add a new node of the reference type that will be inserted into the field.'),
  );
  $form['references_dialog_edit_dialog'] = array(
    '#type' => 'checkbox',
    '#title' => t('Edit dialog'),
    '#default_value' => $settings['references_dialog_edit_dialog'],
    '#description' => t('Display an option to edit the referenced node.'),
  );
  if (module_exists('views')) {
    $form['references_dialog_search_dialog'] = array(
      '#type' => 'checkbox',
      '#title' => t('Search dialog'),
      '#default_value' => $settings['references_dialog_search_dialog'],
      '#description' => t('Display an option to search for content.'),
    );
    $form['references_dialog_search_dialog_view'] = array(
      '#type' => 'select',
      '#options' => references_dialog_get_views_options($instance['entity_type']),
      '#title' => t('Search dialog view'),
      '#default_value' => !empty($settings['references_dialog_search_dialog_view']) ? $settings['references_dialog_search_dialog_view']: NULL,
      '#description' => t('Select which view should be used for the search dialog.'),
    );
  }
  return $form;
}

/**
 * Menu access checker for references_dialog
 */
function references_dialog_search_access($entity_type, $field_name, $bundle_name) {
  return TRUE;
}

/**
 * Add our references dialog fields to the existing element
 */
function references_dialog_process_widget(&$element) {
  if (!isset($element['#entity_type'])) {
    return $element;
  }
  $item = $element['#value'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  $widget_settings = $instance['widget']['settings'];
  $widget_type = $instance['widget']['type'];
  $widgets = references_dialog_widgets();
  // Bail if we don't have anything to do here.
  if (!in_array($widget_type, array_keys($widgets)) || (!$widget_settings['references_dialog_search_dialog'] && !$widget_settings['references_dialog_edit_dialog'] && !$widget_settings['references_dialog_add_dialog'])) {
    return $element;
  }
  // Attach javascript and CSS needed.
  $element['#attached']['js'] = array(drupal_get_path('module', 'references_dialog') . '/js/references-dialog.js');
  $element['#attached']['css'] = array(drupal_get_path('module', 'references_dialog') . '/css/references-dialog-admin.css');
  $dialog_widget = references_dialog_widget_load($widget_type);
  $dialog_widget['dialog_form']($element, $widget_settings, $field, $instance);
  return $element;
}

/**
 * Implements hook_theme().
 */
function references_dialog_theme() {
  return array( 
    'references_dialog_page' => array(
      'render element' => 'page',
      'template' => 'references-dialog-page',
    ),
    'references_dialog_links' => array(
      'variables' => array('links' => null),
    ),
  );
}

function references_dialog_entity_insert($entity, $entity_type) {
  if (references_dialog_in_dialog()) {
    references_dialog_close_on_redirect($entity, $entity_type);
  }
}

function references_dialog_entity_update($entity, $entity_type) {
  if (references_dialog_in_dialog()) {
    references_dialog_close_on_redirect($entity, $entity_type);
  }
}

/**
 * Sets our destination parameter so that the dialog will close itself after
 * redirect is completed.
 */
function references_dialog_close_on_redirect($entity, $entity_type) {
  $entity_info = entity_get_info($entity_type);
  // We use $_GET['destination'] since that overrides anything that happens
  // in the form. It is a hack, but it is very effective, since we don't have 
  // to be worried about getting overrun by other form submit handlers.
  $_GET['destination'] = 'references-dialog/redirect/' . 
  $entity->{$entity_info['entity keys']['id']} . '/' . 
  $entity_type .
  '?references-dialog-close=1&render=references-dialog';
}

/**
 * Implements hook_init().
 */
function references_dialog_init() {
  if (references_dialog_in_dialog()) {
    module_invoke_all('suppress');
    drupal_add_css(drupal_get_path('module', 'references_dialog') . '/css/references-dialog-search.css');
  }
}

/**
 * Menu callback for fetching a search view.
 * @param $view a view to use.
 */
function references_dialog_search_view($entity_type, $field_name, $bundle_name) {
  $args = func_get_args();
  $args = array_splice($args, 2);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  $field_info = field_info_field($field_name);
  if ($instance && $instance['widget']['settings']['search_dialog']) {
    list($view_name, $display) = explode(':', $instance['widget']['settings']['search_dialog_view']);
    $view = views_get_view($view_name);
    // Check for referencable types and pass them as arguments if they exist.
    if (isset($field_info['settings']['referenceable_types'])) {
      $types = array();
      foreach ($field_info['settings']['referenceable_types'] as $type => $active) {
        if ($type == $active) {
          $types[] = $type;
        }
        if (count($types)) {
          array_unshift($args, implode('+', $types));
        }
      }
    }
    return $view->execute_display($display, $args);  
  }
  else {
    return drupal_not_found();
  }
  // Load some helper javascript for this view.  
  
}

/**
 * Implements hook_page_alter().
 */
function references_dialog_page_alter(&$page) {
  if (references_dialog_in_dialog()) {
    $page['#theme'] = 'references_dialog_page';
  }
}

function references_dialog_in_dialog() {
  return isset($_GET['render']) && $_GET['render'] == 'references-dialog';
}

/**
 * Implements of hook_views_api().
 */
function references_dialog_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'reference_dialog') . '/views',
  );
}

/**
 * Implements of hook_views_plugins().
 */
function references_dialog_views_plugins() {
  return array(
    'display' => array(
      'references_dialog' => array(
        'title' => t('Reference Dialog Search'),
        'admin' => t('References'),
        'help' => t('A view that can be used when referencing content.'),
        'handler' => 'references_dialog_plugin_display',
        'help topic' => 'references-dialog',
        'references_dialog display' => TRUE,
        'path' => drupal_get_path('module', 'references_dialog') . '/views',
      ),
    ),
  );
}

/**
 * Retrieves the list of views with a 'references dialog' display,
 * in a format suitable for a 'select' form element.
 *
 * @param $entity_type
 *   The entity type.
 *
 * @return
 *   An array of eligible views displays.
 */
function references_dialog_get_views_options($entity_type) {
  // Filter views that contain a 'references' display. This actually returns a
  // list of displays (the same view appears several times).
  $displays = views_get_applicable_views('references_dialog display');

  // Filter views that list the entity type we want, and group the separate
  // displays by view.
  $entity_info = entity_get_info($entity_type);
  $options = array();
  foreach ($displays as $data) {
    list($view, $display_id) = $data;
    if ($view->base_table == $entity_info['base table']) {
      $options[$view->name . ':' . $display_id] = $view->name .' - ' . $view->display[$display_id]->display_title;
    }
  }
  return $options;
}

function references_dialog_redirect_access() {
  // @todo It is not really a security issue, but we should probably check
  // that you can create the content you just created (silly), to access
  // this page.
  return TRUE;
}

function references_dialog_redirect_page($entity_id, $entity_type) {
  $entity = reset(entity_load($entity_type, array($entity_id)));
  $entity_info = entity_get_info($entity_type);
  $entity_id = $entity->{$entity_info['entity keys']['id']};
  $entity_title = $entity->{$entity_info['entity keys']['label']};
  if (isset($entity_id) && references_dialog_in_dialog() && isset($_GET['references-dialog-close'])) {
    drupal_add_js(drupal_get_path('module', 'references_dialog') . '/js/references-dialog-child.js');
    drupal_add_js(array(
      'ReferencesDialog' => array(
        'entity_id' => $entity_id,
        'title' => $entity_title,
      ),
    ), 'setting');
  }
  return '';
}

/**
 * Theme function for theming the links for opening
 * the references dialog.
 */
function theme_references_dialog_links($links) {
  return theme('links', array('links' => $links, 'attributes' => array('class' => 'references-dialog-links')));
}